services:

  consumer-edc:
    container_name: "consumer-edc"
    image: ghcr.io/possible-x/connector:latest-develop
    env_file: "secrets/edc_ionos_secrets.txt"
    volumes:
      - ./initial_data/edc/consumer.properties:/app/dataspaceconnector-configuration.properties:ro
      - ./initial_data/edc/consumer.pfx:/opt/edc.pfx:ro
    entrypoint: >
      /bin/sh -c '
      touch /opt/vault.properties;
      java -Dedc.fs.config=/app/dataspaceconnector-configuration.properties -jar /app/connector.jar
      '
    network_mode: "host"

  provider-edc:
    container_name: "provider-edc"
    image: ghcr.io/possible-x/connector:latest-develop
    env_file: "secrets/edc_ionos_secrets.txt"
    volumes:
      - ./initial_data/edc/provider.properties:/app/dataspaceconnector-configuration.properties:ro
      - ./initial_data/edc/provider.pfx:/opt/edc.pfx:ro
    entrypoint: >
      /bin/sh -c '
      touch /opt/vault.properties;
      java -Dedc.fs.config=/app/dataspaceconnector-configuration.properties -jar /app/connector.jar 
      '
    network_mode: "host"
  
  omejdn-server:
    user: "${UID}:${GID}"
    container_name: "omejdn-server"
    image: ghcr.io/possible-x/omejdn:0.1.1
    environment:
      OMEJDN_ISSUER: "http://localhost:4567"
      OMEJDN_FRONT_URL: "http://localhost:4567"
      OMEJDN_OPENID: true
      OMEJDN_ENVIRONMENT: "development"
      OMEJDN_ACCEPT_AUDIENCE: idsc:IDS_CONNECTORS_ALL
      OMEJDN_DEFAULT_AUDIENCE: idsc:IDS_CONNECTORS_ALL
      OMEJDN_PLUGINS: plugins_config/plugins.yml
    volumes:
      - ./docker_data/omejdn/config:/opt/config
      - ./initial_data/omejdn/plugins_config/plugins.yml:/opt/plugins_config/plugins.yml:ro
      - ./docker_data/omejdn/keys:/opt/keys
      - ./initial_data/omejdn/config/:/opt/initial_config/:ro
      - ./initial_data/omejdn/keys/:/opt/initial_keys:ro
    entrypoint: >
      /bin/bash -c '
      cp -n /opt/initial_config/initial_clients.yml /opt/config/clients.yml;
      cp -rf /opt/initial_config/scope_mapping.yml /opt/config/scope_mapping.yml;
      cp -r -n /opt/initial_keys/* /opt/keys/;
      ruby omejdn.rb
      '
    network_mode: "host"
    restart: on-failure

  sd-creation-wizard-api:
    user: "${UID}:${GID}"
    container_name: "sd-creation-wizard-api"
    image: ghcr.io/possible-x/catalog-shapes/sd-creation-wizard-api:latest-develop
    ports:
      - "8085:8080"

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.admin
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./initial_data/pgadmin/servers.json:/pgadmin4/servers.json:ro
    entrypoint: >
      /bin/sh -c '
      echo "postgres:5432:*:postgres:postgres" > /tmp/pgpass;
      chmod 600 /tmp/pgpass;
      /entrypoint.sh
      '
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
  
  postgres:
    user: "${UID}:${GID}"
    container_name: "postgres_possible"
    hostname: postgres
    image: postgres:16
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 5s
      retries: 50
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - ./docker_data/postgres/data:/var/lib/postgresql/data
      - ./initial_data/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
